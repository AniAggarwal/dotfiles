let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/.config/nvim
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
argglobal
%argdel
edit init.vim
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 1resize ' . ((&columns * 126 + 127) / 254)
exe '2resize ' . ((&lines * 42 + 34) / 69)
exe 'vert 2resize ' . ((&columns * 126 + 127) / 254)
exe 'vert 3resize ' . ((&columns * 127 + 127) / 254)
argglobal
balt coc-settings.json
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 25 - ((8 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 25
normal! 0
lcd ~/.config/nvim
wincmd w
argglobal
if bufexists("~/.config/nvim/coc-settings.json") | buffer ~/.config/nvim/coc-settings.json | else | edit ~/.config/nvim/coc-settings.json | endif
if &buftype ==# 'terminal'
  silent file ~/.config/nvim/coc-settings.json
endif
balt ~/.config/nvim/init.vim
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 9 - ((7 * winheight(0) + 21) / 42)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 9
normal! 051|
wincmd w
argglobal
if bufexists("~/.config/nvim/keys.vim") | buffer ~/.config/nvim/keys.vim | else | edit ~/.config/nvim/keys.vim | endif
if &buftype ==# 'terminal'
  silent file ~/.config/nvim/keys.vim
endif
balt ~/.config/nvim/init.vim
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 96 - ((36 * winheight(0) + 32) / 65)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 96
normal! 033|
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 22 + 34) / 69)
exe 'vert 1resize ' . ((&columns * 126 + 127) / 254)
exe '2resize ' . ((&lines * 42 + 34) / 69)
exe 'vert 2resize ' . ((&columns * 126 + 127) / 254)
exe 'vert 3resize ' . ((&columns * 127 + 127) / 254)
tabnext 1
badd +25 ~/.config/nvim/init.vim
badd +1 ~/.config/nvim/keys.vim
badd +97 ~/.config/nvim/plug-config/startify.vim
badd +6 ~/.config/nvim/plug-config/indent-blankline.vim
badd +1 ~/.config/nvim/plug-config/vim-plug.vim
badd +1 ~/.config/nvim/NERD_tree_2
badd +6 ~/.config/nvim/plug-config/nerdtree.vim
badd +1022 ~/.local/share/nvim/plugged/vim-startify/doc/startify.txt
badd +6 ~/.local/share/nvim/plugged/vim-airline/doc/airline.txt
badd +1 ~/.config/nvim/plug-config/nvim-treesitter.lua
badd +26 ~/dev/projects/autonomous-pinball/model-training-and-testing/main.py
badd +20 ~/.config/nvim/coc-settings.json
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOFAIc
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
